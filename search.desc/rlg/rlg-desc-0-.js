searchState.loadedDescShard("rlg", 0, "RustLogs (RLG)\nThe <code>config</code> module contains the configuration struct for …\nThe <code>log</code> module contains the log struct and its …\nThe <code>log_format</code> module contains the log format enumeration …\nThe <code>log_level</code> module contains the log level enumeration …\nConditional debug logging Logs if <code>debug_enabled</code> feature …\nMacro for error log with default format\nMacro for fatal log\nMacro for info log with default session id and format …\nMacro to create a new log easily Usage: let log = …\nConditional logging based on a predicate Usage: …\nAsync log message to file Usage: let result = …\nMacro for logging with metadata Usage: let log = …\nPrint log to stdout Usage: macro_print_log!(log);\nSet log format if not already defined Usage: …\nMacro for trace log\nMacro for warn log\nThe <code>macros</code> module contains functions for generating macros.\nConfiguration struct for logging system.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoads configuration from environment variables or defaults.\nPath and name of the log file.\nThe <code>Log</code> struct provides an easy way to log a message to …\nA string that holds the component name.\nThis implementation allows the Log struct to be created …\nA string that holds the description of the log message.\nFormats the value using the given formatter.\nA string that holds the log format.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA string that holds the level (INFO, WARN, ERROR, etc.).\nLogs a message asynchronously using a pre-allocated buffer …\nCreates a new log entry with provided details.\nA string that holds a session ID. The session ID is a …\nA string that holds the timestamp in ISO 8601 format.\nWrites a log entry to the log file using the provided …\nThe log format is set to Apache Access Log.\nThe log format is set to CEF.\nThe log format is set to CLF.\nThe log format is set to ELF.\nThe log format is set to GELF.\nThe log format is set to JSON.\nThe log format is set to Log4j XML.\nAn enumeration of the different log formats that can be …\nThe log format is set to Logstash.\nThe log format is set to NDJSON (Newline Delimited JSON).\nThe log format is set to W3C.\nImplements <code>LogFormat</code> to display the log format as a string.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe log level is set to all.\nThe log level is set to debug.\nThe log level is set to disabled.\nThe log level is set to error.\nThe log level is set to fatal.\nThe log level is set to info.\nAn enumeration of the different levels that a log message …\nThe log level is set to none.\nThe log level is set to trace.\nThe log level is set to verbose.\nThe log level is set to warning.\nImplements <code>LogLevel</code> to display the log level as a string. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")