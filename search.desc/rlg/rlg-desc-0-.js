searchState.loadedDescShard("rlg", 0, "RustLogs (RLG)\nThe <code>config</code> module contains the configuration struct for …\nThe <code>log</code> module contains the log struct and its …\nThe <code>log_format</code> module contains the log format enumeration …\nThe <code>log_level</code> module contains the log level enumeration …\nThis macro conditionally logs a debug message if the …\nThis macro creates an <code>ERROR</code> level log entry with a default …\nThis macro creates a <code>FATAL</code> level log entry with a default …\nThis macro creates an <code>INFO</code> level log entry with a default …\nThis macro simplifies the creation of log entries with …\nThis macro conditionally logs a message based on a …\nThis macro asynchronously logs a message to a file. It …\nThis macro logs with metadata. It replaces specific keys …\nThis macro prints a log entry to the standard output …\nThis macro sets the log format to CLF if it is not already …\nThis macro creates a <code>TRACE</code> level log entry with a default …\nThis macro creates a <code>WARN</code> level log entry with a default …\nThe <code>macros</code> module contains functions for generating macros.\nRotate log files based on date.\nRotate log files based on count.\nRotate log files based on size.\nRotate log files based on time.\nStruct representing the configuration for the logging …\nErrors that can occur while constructing a configuration.\nError message for environment variable errors.\nLog to a file.\nError message for file parsing errors.\nError message for file read errors.\nError message for invalid path errors.\nEnum representing different log rotation options.\nEnum representing different logging destinations.\nLog to a network destination.\nError message for parsing errors.\nError message for file rotation errors.\nLog to standard output.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoads configuration from environment variables or applies …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads configuration from a TOML or YAML file, or from …\nThe path to the log file.\nReturns a display-friendly string representation of the …\nThe log format.\nThe log level.\nThe log rotation configuration.\nThe logging destinations.\nThe <code>Log</code> struct provides an easy way to log a message to …\nA string that holds the component name.\nThis implementation allows the Log struct to be created …\nA string that holds the description of the log message.\nFormats the value using the given formatter.\nA string that holds the log format.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA string that holds the level (INFO, WARN, ERROR, etc.).\nLogs a message asynchronously using a pre-allocated buffer …\nCreates a new log entry with provided details.\nA string that holds a session ID. The session ID is a …\nA string that holds the timestamp in ISO 8601 format.\nWrites a log entry to the log file using the provided …\nApache HTTP server access logs.\nCommon Event Format.\nCommon Log Format.\nExtended Log Format.\nGraylog Extended Log Format.\nJavaScript Object Notation.\nLog4j’s XML format.\nAn enumeration of the different log formats that can be …\nLogstash JSON format.\nNewline Delimited JSON.\nCustom error type for parsing LogFormat.\nW3C Extended Log File Format.\nFormats a log entry according to the specified log format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidates if a given string adheres to a particular log …\n<code>ALL</code>: The log level includes all levels.\n<code>CRITICAL</code>: Critical conditions, often requiring immediate …\n<code>DEBUG</code>: Debugging information, typically useful for …\n<code>DISABLED</code>: Logging is disabled.\n<code>ERROR</code>: Error events that might still allow the application …\n<code>FATAL</code>: Very severe error events that will presumably lead …\n<code>INFO</code>: Informational messages that highlight the progress …\nAn enumeration of the different levels that a log message …\n<code>NONE</code>: No logging.\nCustom error type for LogLevel parsing with context.\n<code>TRACE</code>: Finer-grained informational events than <code>DEBUG</code>.\n<code>VERBOSE</code>: Detailed logging, often more detailed than <code>INFO</code>.\n<code>WARN</code>: Potentially harmful situations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>LogLevel</code> from a numeric value, similar to syslog …\nChecks if the current log level includes another log level.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe invalid log level value.\nCreates a new instance of <code>ParseLogLevelError</code> with the …\nConverts the log level to its corresponding numeric value, …")