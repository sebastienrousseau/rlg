searchState.loadedDescShard("rlg", 0, "RustLogs (RLG)\nThe current version of the RustLogs crate.\nConfiguration module for RustLogs. Configuration module …\nError handling module\nCore logging functionality.\nLog format definitions and implementations.\nLog level definitions and implementations.\nThis macro conditionally logs a debug message if the …\nThis macro creates an <code>ERROR</code> level log entry with a default …\nThis macro creates a <code>FATAL</code> level log entry with a default …\nThis macro creates an <code>INFO</code> level log entry with a default …\nThis macro simplifies the creation of log entries with …\nThis macro conditionally logs a message based on a …\nThis macro asynchronously logs a message to a file. It …\nThis macro logs with metadata. It replaces specific keys …\nThis macro prints a log entry to the standard output …\nThis macro sets the log format to CLF if it is not already …\nThis macro creates a <code>TRACE</code> level log entry with a default …\nThis macro creates a <code>WARN</code> level log entry with a default …\nMacros for convenient logging.\nUtility functions module\nThis structure holds the configuration for logging, …\nCustom error types for configuration management.\nError occurred while parsing the configuration file.\nCount-based log rotation.\nDate-based log rotation.\nError occurred while parsing an environment variable.\nLog to a file.\nError reading from a file.\nError writing to a file.\nInvalid file path was provided for configuration.\nEnum representing log rotation options.\nEnum representing different logging destinations.\nRequired field is missing in the configuration.\nLog to a network destination.\nSize-based log rotation.\nLog to standard output.\nTime-based log rotation.\nError validating the configuration settings.\nConfiguration version mismatch.\nError setting up the file watcher.\nCompares two configurations and returns the differences.\nEnvironment variables for the system.\nExpands environment variables in the configuration values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a string into a <code>LogRotation</code> enum variant.\nRetrieves a value from the configuration based on the …\nHot-reloads configuration on file change.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads configuration from a file or environment variables.\nPath to the log file.\nLog format string.\nLog level for the system.\nLog rotation settings.\nLogging destinations for the system.\nMerges another configuration into the current …\nProfile name for the configuration.\nSaves the current configuration to a file.\nSets a value in the configuration based on the specified …\nValidates the configuration settings.\nVersion of the configuration.\nConfiguration error\nCustom error\nDateTime parse error\nContains the error value\nLog format parse error\nLog formatting error\nI/O error\nLog level parse error\nNetwork error\nContains the success value\nErrors that can occur during the logging process\nType alias for a Result with RlgError as the error type.\nLog rotation error\nUnsupported log format\nCreate a new custom error with a given message.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>Log</code> struct provides an easy way to log a message to …\nThe component that generated the log message.\nThe description of the log message.\nThe format of the log message.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe log level of the message.\nLogs a message asynchronously using a pre-allocated buffer …\nCreates a new log entry with provided details.\nThe session ID for the log entry.\nThe time the log entry was created.\nWrites a log entry to the log file using the provided …\nApache HTTP server access logs.\nCommon Event Format.\nCommon Log Format.\nExtended Log Format.\nGraylog Extended Log Format.\nJavaScript Object Notation.\nLog4j’s XML format.\nAn enumeration of the different log formats that can be …\nLogstash JSON format.\nNewline Delimited JSON.\nW3C Extended Log File Format.\nFormats a log entry according to the specified log format.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nValidates if a given string adheres to a particular log …\n<code>ALL</code>: The log level includes all levels.\n<code>CRITICAL</code>: Critical conditions, often requiring immediate …\n<code>DEBUG</code>: Debugging information, typically useful for …\n<code>DISABLED</code>: Logging is disabled.\n<code>ERROR</code>: Error events that might still allow the application …\n<code>FATAL</code>: Very severe error events that will presumably lead …\n<code>INFO</code>: Informational messages that highlight the progress …\nAn enumeration of the different levels that a log message …\n<code>NONE</code>: No logging.\nCustom error type for LogLevel parsing with context.\n<code>TRACE</code>: Finer-grained informational events than <code>DEBUG</code>.\n<code>VERBOSE</code>: Detailed logging, often more detailed than <code>INFO</code>.\n<code>WARN</code>: Potentially harmful situations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>LogLevel</code> from a numeric value, similar to syslog …\nChecks if the current log level includes another log level.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe invalid log level value.\nCreates a new instance of <code>ParseLogLevelError</code> with the …\nConverts the log level to its corresponding numeric value, …\nFormats a file size in a human-readable format.\nGenerates a timestamp string in ISO 8601 format.\nChecks if a directory is writable.\nChecks if a file exists and is writable.\nParses a datetime string in ISO 8601 format.\nSanitizes a string for use in log messages.\nTruncates the file at the given path to the specified size.")