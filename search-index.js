var searchIndex = new Map(JSON.parse('[\
["rlg",{"doc":"RustLogs (RLG)","t":"CCCCQQQQQQQQQQQQCFNNNNNNNNNONNNNNNFNNNNONONNNONNONNNOONNNNNNNPPPPPPPGPPPNNNNNNNNNNNNNNNNPPPPPPGPPPPNNNNNNNNNNNNNNNN","n":["config","log","log_format","log_level","macro_debug_log","macro_error_log","macro_fatal_log","macro_info_log","macro_log","macro_log_if","macro_log_to_file","macro_log_with_metadata","macro_print_log","macro_set_log_format_clf","macro_trace_log","macro_warn_log","macros","Config","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","load","log_file_path","partial_cmp","to_owned","try_from","try_into","type_id","vzip","Log","borrow","borrow_mut","clone","clone_into","component","default","description","eq","fmt","fmt","format","from","into","level","log","new","partial_cmp","session_id","time","to_owned","to_string","try_from","try_into","type_id","vzip","write_log_entry","ApacheAccessLog","CEF","CLF","ELF","GELF","JSON","Log4jXML","LogFormat","Logstash","NDJSON","W3C","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id","vzip","ALL","DEBUG","DISABLED","ERROR","FATAL","INFO","LogLevel","NONE","TRACE","VERBOSE","WARNING","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id","vzip"],"q":[[0,"rlg"],[17,"rlg::config"],[34,"rlg::log"],[61,"rlg::log_format"],[88,"rlg::log_level"],[115,"core::fmt"],[116,"core::fmt"],[117,"core::option"],[118,"core::result"],[119,"core::any"],[120,"std::io::error"],[121,"alloc::string"]],"d":["The <code>config</code> module contains the configuration struct for …","The <code>log</code> module contains the log struct and its …","The <code>log_format</code> module contains the log format enumeration …","The <code>log_level</code> module contains the log level enumeration …","Conditional debug logging Logs if <code>debug_enabled</code> feature …","Macro for error log with default format","Macro for fatal log","Macro for info log with default session id and format …","Macro to create a new log easily Usage: let log = …","Conditional logging based on a predicate Usage: …","Async log message to file Usage: let result = …","Macro for logging with metadata Usage: let log = …","Print log to stdout Usage: macro_print_log!(log);","Set log format if not already defined Usage: …","Macro for trace log","Macro for warn log","The <code>macros</code> module contains functions for generating macros.","Configuration struct for logging system.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Loads configuration from environment variables or defaults.","Path and name of the log file.","","","","","","","The <code>Log</code> struct provides an easy way to log a message to …","","","","","A string that holds the component name.","This implementation allows the Log struct to be created …","A string that holds the description of the log message.","","","Formats the value using the given formatter.","A string that holds the log format.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","A string that holds the level (INFO, WARN, ERROR, etc.).","Logs a message asynchronously using a pre-allocated buffer …","Creates a new log entry with provided details.","","A string that holds a session ID. The session ID is a …","A string that holds the timestamp in ISO 8601 format.","","","","","","","Writes a log entry to the log file using the provided …","The log format is set to Apache Access Log.","The log format is set to CEF.","The log format is set to CLF.","The log format is set to ELF.","The log format is set to GELF.","The log format is set to JSON.","The log format is set to Log4j XML.","An enumeration of the different log formats that can be …","The log format is set to Logstash.","The log format is set to NDJSON (Newline Delimited JSON).","The log format is set to W3C.","","","","","","Implements <code>LogFormat</code> to display the log format as a string.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","The log level is set to all.","The log level is set to debug.","The log level is set to disabled.","The log level is set to error.","The log level is set to fatal.","The log level is set to info.","An enumeration of the different levels that a log message …","The log level is set to none.","The log level is set to trace.","The log level is set to verbose.","The log level is set to warning.","","","","","","","Implements <code>LogLevel</code> to display the log level as a string. …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,14,14,14,14,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,13,13,13,13,13,13,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],"f":"``````````````````{ce{}{}}0{bb}{{ce}d{}{}}{{bb}f}{{bh}j}{cc{}}5{{}b}`{{bb}{{n{l}}}}7{c{{A`{e}}}{}{}}0{cAb{}}9`99{AdAd}8`{{}Ad}`{{AdAd}f}{{Adh}j}0`8=`{Ad{{Af{d}}}}{{AhAhAjAhAhAl}Ad}{{AdAd}{{n{l}}}}``{ce{}{}}{cAn{}}::91{{AjAhAhAl}{{Af{d}}}}```````````22{AlAl}{{ce}d{}{}}{{AlAl}f}{{Alh}j}0{cc{}}7{{AlAl}{{n{l}}}}87{c{{A`{e}}}{}{}}0{cAb{}}:```````````::{AjAj}7{{AjAj}f}{{Ajh}j}06={{AjAj}{{n{l}}}}>=554>","c":[],"p":[[5,"Config",17],[1,"unit"],[1,"bool"],[5,"Formatter",115],[8,"Result",115],[6,"Ordering",116],[6,"Option",117],[6,"Result",118],[5,"TypeId",119],[5,"Log",34],[8,"Result",120],[1,"str"],[6,"LogLevel",88],[6,"LogFormat",61],[5,"String",121]],"b":[[43,"impl-Debug-for-Log"],[44,"impl-Display-for-Log"],[77,"impl-Display-for-LogFormat"],[78,"impl-Debug-for-LogFormat"],[104,"impl-Debug-for-LogLevel"],[105,"impl-Display-for-LogLevel"]]}],\
["xtask",{"doc":"This is the main entry point for the xtask crate.","t":"H","n":["main"],"q":[[0,"xtask"],[1,"anyhow"],[2,"core::result"]],"d":[""],"i":[0],"f":"{{}{{f{bd}}}}","c":[],"p":[[1,"unit"],[5,"Error",1],[6,"Result",2]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
