var searchIndex = new Map(JSON.parse('[\
["rlg",{"doc":"A Rust library that implements application-level logging …","t":"PPPPPPPPPPPFGGPPPPPNNNNNNNNNNNNONONNNNNNNNNONNNNNNONQQQQQQQQCNNNNOONNNNNNNNNNNNNNN","n":["ALL","CEF","CLF","DEBUG","DISABLED","ELF","ERROR","FATAL","GELF","INFO","JSON","Log","LogFormat","LogLevel","NONE","TRACE","VERBOSE","W3C","WARNING","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","component","default","description","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","into","into","into","level","log","macro_debug_log","macro_error_log","macro_info_log","macro_log","macro_log_to_file","macro_print_log","macro_set_log_format_clf","macro_warn_log","macros","new","partial_cmp","partial_cmp","partial_cmp","session_id","time","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"rlg"],[82,"core::fmt"],[83,"core::fmt"],[84,"core::cmp"],[85,"core::option"],[86,"alloc::string"],[87,"core::result"],[88,"core::any"]],"d":["The log level is set to all.","The log format is set to CEF.","The log format is set to CLF.","The log level is set to debug.","The log level is set to disabled.","The log format is set to ELF.","The log level is set to error.","The log level is set to fatal.","The log format is set to GELF.","The log level is set to info.","The log format is set to JSON.","The <code>Log</code> struct provides an easy way to log a message to the","An enumeration of the different log formats that can be …","Implements <code>Log</code> to log a message to the console with a …","The log level is set to none.","The log level is set to trace.","The log level is set to verbose.","The log format is set to W3C.","The log level is set to warning.","","","","","","","","","","","","","A string that holds the component name.","This implementation allows the Log struct to be created …","A string that holds the description of the log message.","","","","Implements <code>LogFormat</code> to display the log format as a string.","","","Implements <code>LogLevel</code> to display the log level as a string.","Formats the value using the given formatter.","","A string that holds the log format.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A string that holds the level (INFO, WARN, ERROR, etc.).","Logs a message asynchronously using a pre-allocated buffer …","Conditional debug logging Logs if <code>debug_enabled</code> feature …","Macro for error log with default format","Macro for info log with default session id and format …","Macro to create a new log easily Usage: let log = …","Async log message to file Usage: let result = …","Print log to stdout Usage: macro_print_log!(log);","Set log format if not already defined Usage: …","Macro for warn log","The <code>macros</code> module contains functions for generating macros.","Creates a new instance of the <code>Log</code> struct with the provided …","","","","A string that holds a session ID. The session ID is a …","A string that holds the timestamp in ISO 8601 format.","","","","","","","","","","","","","","",""],"i":[2,1,1,2,2,1,2,2,1,2,1,0,0,0,2,2,2,1,2,1,2,3,1,2,3,1,2,3,1,2,3,3,3,3,1,2,3,1,1,2,2,3,3,3,1,2,3,1,2,3,3,3,0,0,0,0,0,0,0,0,0,3,1,2,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3],"f":"```````````````````{ce{}{}}00000{bb}{dd}{ff}{{ce}h{}{}}00`{{}f}`{{bb}j}{{dd}j}{{ff}j}{{bl}n}0{{dl}n}0{{fl}n}0`{cc{}}00<<<`{f{{A`{h}}}}`````````{{AbAbdAbAbb}f}{{bb}{{Af{Ad}}}}{{dd}{{Af{Ad}}}}{{ff}{{Af{Ad}}}}``{ce{}{}}00{cAh{}}00{c{{Aj{e}}}{}{}}00000{cAl{}}00","c":[],"p":[[6,"LogFormat",0],[6,"LogLevel",0],[5,"Log",0],[1,"unit"],[1,"bool"],[5,"Formatter",82],[8,"Result",82],[8,"Result",83],[1,"str"],[6,"Ordering",84],[6,"Option",85],[5,"String",86],[6,"Result",87],[5,"TypeId",88]],"b":[[37,"impl-Display-for-LogFormat"],[38,"impl-Debug-for-LogFormat"],[39,"impl-Debug-for-LogLevel"],[40,"impl-Display-for-LogLevel"],[41,"impl-Display-for-Log"],[42,"impl-Debug-for-Log"]]}],\
["xtask",{"doc":"This is the main entry point for the xtask crate.","t":"H","n":["main"],"q":[[0,"xtask"],[1,"anyhow"],[2,"core::result"]],"d":[""],"i":[0],"f":"{{}{{f{bd}}}}","c":[],"p":[[1,"unit"],[5,"Error",1],[6,"Result",2]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
